plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

description = 'Custom OpenAPI Generator Plugin for Vertex API Client'

dependencies {
    implementation 'org.openapitools:openapi-generator:7.14.0'
    implementation 'org.openapitools:openapi-generator-gradle-plugin:7.14.0'
    implementation 'io.swagger.core.v3:swagger-models:2.2.31'
    testImplementation(platform('org.junit:junit-bom:5.10.3'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.3')
}


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/Vertexvis/vertex-api-client-java")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user") ?: ""
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key") ?: ""
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId = 'openapi-generator-plugin'
            from components.java
            pom {
                name = 'com.vertexvis:openapi-generator-plugin'
                description = 'Custom OpenAPI Generator Plugin for Vertex API Client'
                url = 'https://github.com/Vertexvis/vertex-api-client-java'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/Vertexvis/vertex-api-client-java/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        email = 'support@vertexvis.com'
                        name = 'Vertex Developers'
                        organizationUrl = 'https://developer.vertexvis.com/'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:vertexvis/vertex-api-client-java.git'
                    developerConnection = 'scm:git:git@github.com:vertexvis/vertex-api-client-java.git'
                    url = 'https://github.com/Vertexvis/vertex-api-client-java'
                }
            }
        }
    }
}

signing {
    def hasSigningKey = project.hasProperty("signingKey")
    def hasSigningPassword = project.hasProperty("signingPassword")
    required { hasSigningKey && hasSigningPassword && !project.version.endsWith("-SNAPSHOT") }
    if (hasSigningKey && hasSigningPassword) {
        def base64Decode = { prop ->
            return new String(Base64.getDecoder().decode(project.findProperty(prop).toString())).trim()
        }
        useInMemoryPgpKeys(base64Decode("signingKey"), base64Decode("signingPassword"))
    }
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    dependsOn tasks.withType(GenerateModuleMetadata)
    dependsOn tasks.withType(Jar)
}

// tasks.withType(PublishToMavenLocal) {
//     dependsOn tasks.withType(Sign)
// }

// Debug task to check if the service file exists
task checkServiceFile {
    doLast {
        def serviceFile = file('src/main/resources/META-INF/services/org.openapitools.codegen.CodegenConfig')
        if (serviceFile.exists()) {
            println "Service file exists: ${serviceFile.text}"
        } else {
            println "Service file does not exist!"
        }
    }
}

// Debug task to check version
task printVersion {
    doLast {
        println "Project version: ${project.version}"
        println "Root project version: ${rootProject.version}"
        println "isSnapshot property: ${project.hasProperty('isSnapshot')}"
        if (project.hasProperty('isSnapshot')) {
            println "isSnapshot value: ${project.isSnapshot}"
        }
        println "Version ends with SNAPSHOT: ${project.version.endsWith('-SNAPSHOT')}"
    }
}
