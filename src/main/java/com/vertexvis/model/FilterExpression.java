/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples:   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.vertexvis.JSON;

/**
 * Describes how an attribute should be filtered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class FilterExpression {
  public static final String SERIALIZED_NAME_EQ = "eq";
  @SerializedName(SERIALIZED_NAME_EQ)
  @javax.annotation.Nullable
  private String eq;

  public static final String SERIALIZED_NAME_NEQ = "neq";
  @SerializedName(SERIALIZED_NAME_NEQ)
  @javax.annotation.Nullable
  private String neq;

  public static final String SERIALIZED_NAME_GT = "gt";
  @SerializedName(SERIALIZED_NAME_GT)
  @javax.annotation.Nullable
  private String gt;

  public static final String SERIALIZED_NAME_GTE = "gte";
  @SerializedName(SERIALIZED_NAME_GTE)
  @javax.annotation.Nullable
  private String gte;

  public static final String SERIALIZED_NAME_LT = "lt";
  @SerializedName(SERIALIZED_NAME_LT)
  @javax.annotation.Nullable
  private String lt;

  public static final String SERIALIZED_NAME_LTE = "lte";
  @SerializedName(SERIALIZED_NAME_LTE)
  @javax.annotation.Nullable
  private String lte;

  public FilterExpression() {
  }

  public FilterExpression eq(@javax.annotation.Nullable String eq) {
    this.eq = eq;
    return this;
  }

  /**
   * A value of a filter.
   * @return eq
   */
  @javax.annotation.Nullable
  public String getEq() {
    return eq;
  }

  public void setEq(@javax.annotation.Nullable String eq) {
    this.eq = eq;
  }


  public FilterExpression neq(@javax.annotation.Nullable String neq) {
    this.neq = neq;
    return this;
  }

  /**
   * A value of a filter.
   * @return neq
   */
  @javax.annotation.Nullable
  public String getNeq() {
    return neq;
  }

  public void setNeq(@javax.annotation.Nullable String neq) {
    this.neq = neq;
  }


  public FilterExpression gt(@javax.annotation.Nullable String gt) {
    this.gt = gt;
    return this;
  }

  /**
   * A value of a filter.
   * @return gt
   */
  @javax.annotation.Nullable
  public String getGt() {
    return gt;
  }

  public void setGt(@javax.annotation.Nullable String gt) {
    this.gt = gt;
  }


  public FilterExpression gte(@javax.annotation.Nullable String gte) {
    this.gte = gte;
    return this;
  }

  /**
   * A value of a filter.
   * @return gte
   */
  @javax.annotation.Nullable
  public String getGte() {
    return gte;
  }

  public void setGte(@javax.annotation.Nullable String gte) {
    this.gte = gte;
  }


  public FilterExpression lt(@javax.annotation.Nullable String lt) {
    this.lt = lt;
    return this;
  }

  /**
   * A value of a filter.
   * @return lt
   */
  @javax.annotation.Nullable
  public String getLt() {
    return lt;
  }

  public void setLt(@javax.annotation.Nullable String lt) {
    this.lt = lt;
  }


  public FilterExpression lte(@javax.annotation.Nullable String lte) {
    this.lte = lte;
    return this;
  }

  /**
   * A value of a filter.
   * @return lte
   */
  @javax.annotation.Nullable
  public String getLte() {
    return lte;
  }

  public void setLte(@javax.annotation.Nullable String lte) {
    this.lte = lte;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterExpression filterExpression = (FilterExpression) o;
    return Objects.equals(this.eq, filterExpression.eq) &&
        Objects.equals(this.neq, filterExpression.neq) &&
        Objects.equals(this.gt, filterExpression.gt) &&
        Objects.equals(this.gte, filterExpression.gte) &&
        Objects.equals(this.lt, filterExpression.lt) &&
        Objects.equals(this.lte, filterExpression.lte);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eq, neq, gt, gte, lt, lte);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterExpression {\n");
    sb.append("    eq: ").append(toIndentedString(eq)).append("\n");
    sb.append("    neq: ").append(toIndentedString(neq)).append("\n");
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    gte: ").append(toIndentedString(gte)).append("\n");
    sb.append("    lt: ").append(toIndentedString(lt)).append("\n");
    sb.append("    lte: ").append(toIndentedString(lte)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eq");
    openapiFields.add("neq");
    openapiFields.add("gt");
    openapiFields.add("gte");
    openapiFields.add("lt");
    openapiFields.add("lte");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterExpression is not found in the empty JSON string", FilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eq") != null && !jsonObj.get("eq").isJsonNull()) && !jsonObj.get("eq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eq").toString()));
      }
      if ((jsonObj.get("neq") != null && !jsonObj.get("neq").isJsonNull()) && !jsonObj.get("neq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neq").toString()));
      }
      if ((jsonObj.get("gt") != null && !jsonObj.get("gt").isJsonNull()) && !jsonObj.get("gt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gt").toString()));
      }
      if ((jsonObj.get("gte") != null && !jsonObj.get("gte").isJsonNull()) && !jsonObj.get("gte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gte").toString()));
      }
      if ((jsonObj.get("lt") != null && !jsonObj.get("lt").isJsonNull()) && !jsonObj.get("lt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lt").toString()));
      }
      if ((jsonObj.get("lte") != null && !jsonObj.get("lte").isJsonNull()) && !jsonObj.get("lte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lte").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterExpression>() {
           @Override
           public void write(JsonWriter out, FilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterExpression
   * @throws IOException if the JSON string is invalid with respect to FilterExpression
   */
  public static FilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterExpression.class);
  }

  /**
   * Convert an instance of FilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

