/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples:   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.PartInstanceRelationship;
import com.vertexvis.model.PartInstanceRelationshipData;
import com.vertexvis.model.PartRevisionRelationship;
import com.vertexvis.model.PropertySetRelationship;
import com.vertexvis.model.SceneItemRelationship;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.vertexvis.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class UpsertPropertyEntriesRequestDataRelationshipsPropertySet extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpsertPropertyEntriesRequestDataRelationshipsPropertySet.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpsertPropertyEntriesRequestDataRelationshipsPropertySet.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpsertPropertyEntriesRequestDataRelationshipsPropertySet' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PropertySetRelationship> adapterPropertySetRelationship = gson.getDelegateAdapter(this, TypeToken.get(PropertySetRelationship.class));
            final TypeAdapter<PartRevisionRelationship> adapterPartRevisionRelationship = gson.getDelegateAdapter(this, TypeToken.get(PartRevisionRelationship.class));
            final TypeAdapter<SceneItemRelationship> adapterSceneItemRelationship = gson.getDelegateAdapter(this, TypeToken.get(SceneItemRelationship.class));
            final TypeAdapter<PartInstanceRelationship> adapterPartInstanceRelationship = gson.getDelegateAdapter(this, TypeToken.get(PartInstanceRelationship.class));

            return (TypeAdapter<T>) new TypeAdapter<UpsertPropertyEntriesRequestDataRelationshipsPropertySet>() {
                @Override
                public void write(JsonWriter out, UpsertPropertyEntriesRequestDataRelationshipsPropertySet value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PropertySetRelationship`
                    if (value.getActualInstance() instanceof PropertySetRelationship) {
                        JsonElement element = adapterPropertySetRelationship.toJsonTree((PropertySetRelationship)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PartRevisionRelationship`
                    if (value.getActualInstance() instanceof PartRevisionRelationship) {
                        JsonElement element = adapterPartRevisionRelationship.toJsonTree((PartRevisionRelationship)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SceneItemRelationship`
                    if (value.getActualInstance() instanceof SceneItemRelationship) {
                        JsonElement element = adapterSceneItemRelationship.toJsonTree((SceneItemRelationship)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PartInstanceRelationship`
                    if (value.getActualInstance() instanceof PartInstanceRelationship) {
                        JsonElement element = adapterPartInstanceRelationship.toJsonTree((PartInstanceRelationship)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: PartInstanceRelationship, PartRevisionRelationship, PropertySetRelationship, SceneItemRelationship");
                }

                @Override
                public UpsertPropertyEntriesRequestDataRelationshipsPropertySet read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PropertySetRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PropertySetRelationship.validateJsonElement(jsonElement);
                        actualAdapter = adapterPropertySetRelationship;
                        UpsertPropertyEntriesRequestDataRelationshipsPropertySet ret = new UpsertPropertyEntriesRequestDataRelationshipsPropertySet();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PropertySetRelationship failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PropertySetRelationship'", e);
                    }
                    // deserialize PartRevisionRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PartRevisionRelationship.validateJsonElement(jsonElement);
                        actualAdapter = adapterPartRevisionRelationship;
                        UpsertPropertyEntriesRequestDataRelationshipsPropertySet ret = new UpsertPropertyEntriesRequestDataRelationshipsPropertySet();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PartRevisionRelationship failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PartRevisionRelationship'", e);
                    }
                    // deserialize SceneItemRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SceneItemRelationship.validateJsonElement(jsonElement);
                        actualAdapter = adapterSceneItemRelationship;
                        UpsertPropertyEntriesRequestDataRelationshipsPropertySet ret = new UpsertPropertyEntriesRequestDataRelationshipsPropertySet();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SceneItemRelationship failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SceneItemRelationship'", e);
                    }
                    // deserialize PartInstanceRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PartInstanceRelationship.validateJsonElement(jsonElement);
                        actualAdapter = adapterPartInstanceRelationship;
                        UpsertPropertyEntriesRequestDataRelationshipsPropertySet ret = new UpsertPropertyEntriesRequestDataRelationshipsPropertySet();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PartInstanceRelationship failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PartInstanceRelationship'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for UpsertPropertyEntriesRequestDataRelationshipsPropertySet: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UpsertPropertyEntriesRequestDataRelationshipsPropertySet() {
        super("anyOf", Boolean.FALSE);
    }

    public UpsertPropertyEntriesRequestDataRelationshipsPropertySet(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PropertySetRelationship", PropertySetRelationship.class);
        schemas.put("PartRevisionRelationship", PartRevisionRelationship.class);
        schemas.put("SceneItemRelationship", SceneItemRelationship.class);
        schemas.put("PartInstanceRelationship", PartInstanceRelationship.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpsertPropertyEntriesRequestDataRelationshipsPropertySet.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * PartInstanceRelationship, PartRevisionRelationship, PropertySetRelationship, SceneItemRelationship
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PropertySetRelationship) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PartRevisionRelationship) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SceneItemRelationship) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PartInstanceRelationship) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PartInstanceRelationship, PartRevisionRelationship, PropertySetRelationship, SceneItemRelationship");
    }

    /**
     * Get the actual instance, which can be the following:
     * PartInstanceRelationship, PartRevisionRelationship, PropertySetRelationship, SceneItemRelationship
     *
     * @return The actual instance (PartInstanceRelationship, PartRevisionRelationship, PropertySetRelationship, SceneItemRelationship)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PropertySetRelationship`. If the actual instance is not `PropertySetRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PropertySetRelationship`
     * @throws ClassCastException if the instance is not `PropertySetRelationship`
     */
    public PropertySetRelationship getPropertySetRelationship() throws ClassCastException {
        return (PropertySetRelationship)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PartRevisionRelationship`. If the actual instance is not `PartRevisionRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PartRevisionRelationship`
     * @throws ClassCastException if the instance is not `PartRevisionRelationship`
     */
    public PartRevisionRelationship getPartRevisionRelationship() throws ClassCastException {
        return (PartRevisionRelationship)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SceneItemRelationship`. If the actual instance is not `SceneItemRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SceneItemRelationship`
     * @throws ClassCastException if the instance is not `SceneItemRelationship`
     */
    public SceneItemRelationship getSceneItemRelationship() throws ClassCastException {
        return (SceneItemRelationship)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PartInstanceRelationship`. If the actual instance is not `PartInstanceRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PartInstanceRelationship`
     * @throws ClassCastException if the instance is not `PartInstanceRelationship`
     */
    public PartInstanceRelationship getPartInstanceRelationship() throws ClassCastException {
        return (PartInstanceRelationship)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpsertPropertyEntriesRequestDataRelationshipsPropertySet
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PropertySetRelationship
        try {
            PropertySetRelationship.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PropertySetRelationship failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PartRevisionRelationship
        try {
            PartRevisionRelationship.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PartRevisionRelationship failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SceneItemRelationship
        try {
            SceneItemRelationship.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SceneItemRelationship failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PartInstanceRelationship
        try {
            PartInstanceRelationship.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PartInstanceRelationship failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for UpsertPropertyEntriesRequestDataRelationshipsPropertySet with anyOf schemas: PartInstanceRelationship, PartRevisionRelationship, PropertySetRelationship, SceneItemRelationship. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of UpsertPropertyEntriesRequestDataRelationshipsPropertySet given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpsertPropertyEntriesRequestDataRelationshipsPropertySet
     * @throws IOException if the JSON string is invalid with respect to UpsertPropertyEntriesRequestDataRelationshipsPropertySet
     */
    public static UpsertPropertyEntriesRequestDataRelationshipsPropertySet fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpsertPropertyEntriesRequestDataRelationshipsPropertySet.class);
    }

    /**
     * Convert an instance of UpsertPropertyEntriesRequestDataRelationshipsPropertySet to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

