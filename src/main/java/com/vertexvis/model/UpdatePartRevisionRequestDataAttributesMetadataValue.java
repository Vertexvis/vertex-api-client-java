/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples,   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.MetadataDateType;
import com.vertexvis.model.MetadataFloatType;
import com.vertexvis.model.MetadataLongType;
import com.vertexvis.model.MetadataNullType;
import com.vertexvis.model.MetadataStringType;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.vertexvis.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdatePartRevisionRequestDataAttributesMetadataValue extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdatePartRevisionRequestDataAttributesMetadataValue.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdatePartRevisionRequestDataAttributesMetadataValue.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdatePartRevisionRequestDataAttributesMetadataValue' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MetadataDateType> adapterMetadataDateType = gson.getDelegateAdapter(this, TypeToken.get(MetadataDateType.class));
            final TypeAdapter<MetadataFloatType> adapterMetadataFloatType = gson.getDelegateAdapter(this, TypeToken.get(MetadataFloatType.class));
            final TypeAdapter<MetadataLongType> adapterMetadataLongType = gson.getDelegateAdapter(this, TypeToken.get(MetadataLongType.class));
            final TypeAdapter<MetadataNullType> adapterMetadataNullType = gson.getDelegateAdapter(this, TypeToken.get(MetadataNullType.class));
            final TypeAdapter<MetadataStringType> adapterMetadataStringType = gson.getDelegateAdapter(this, TypeToken.get(MetadataStringType.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdatePartRevisionRequestDataAttributesMetadataValue>() {
                @Override
                public void write(JsonWriter out, UpdatePartRevisionRequestDataAttributesMetadataValue value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `MetadataDateType`
                    if (value.getActualInstance() instanceof MetadataDateType) {
                        JsonObject obj = adapterMetadataDateType.toJsonTree((MetadataDateType)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MetadataFloatType`
                    if (value.getActualInstance() instanceof MetadataFloatType) {
                        JsonObject obj = adapterMetadataFloatType.toJsonTree((MetadataFloatType)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MetadataLongType`
                    if (value.getActualInstance() instanceof MetadataLongType) {
                        JsonObject obj = adapterMetadataLongType.toJsonTree((MetadataLongType)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MetadataNullType`
                    if (value.getActualInstance() instanceof MetadataNullType) {
                        JsonObject obj = adapterMetadataNullType.toJsonTree((MetadataNullType)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MetadataStringType`
                    if (value.getActualInstance() instanceof MetadataStringType) {
                        JsonObject obj = adapterMetadataStringType.toJsonTree((MetadataStringType)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: MetadataDateType, MetadataFloatType, MetadataLongType, MetadataNullType, MetadataStringType");
                }

                @Override
                public UpdatePartRevisionRequestDataAttributesMetadataValue read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize MetadataDateType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetadataDateType.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MetadataDateType'");
                        UpdatePartRevisionRequestDataAttributesMetadataValue ret = new UpdatePartRevisionRequestDataAttributesMetadataValue();
                        ret.setActualInstance(adapterMetadataDateType.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MetadataDateType'", e);
                    }

                    // deserialize MetadataFloatType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetadataFloatType.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MetadataFloatType'");
                        UpdatePartRevisionRequestDataAttributesMetadataValue ret = new UpdatePartRevisionRequestDataAttributesMetadataValue();
                        ret.setActualInstance(adapterMetadataFloatType.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MetadataFloatType'", e);
                    }

                    // deserialize MetadataLongType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetadataLongType.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MetadataLongType'");
                        UpdatePartRevisionRequestDataAttributesMetadataValue ret = new UpdatePartRevisionRequestDataAttributesMetadataValue();
                        ret.setActualInstance(adapterMetadataLongType.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MetadataLongType'", e);
                    }

                    // deserialize MetadataNullType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetadataNullType.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MetadataNullType'");
                        UpdatePartRevisionRequestDataAttributesMetadataValue ret = new UpdatePartRevisionRequestDataAttributesMetadataValue();
                        ret.setActualInstance(adapterMetadataNullType.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MetadataNullType'", e);
                    }

                    // deserialize MetadataStringType
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MetadataStringType.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'MetadataStringType'");
                        UpdatePartRevisionRequestDataAttributesMetadataValue ret = new UpdatePartRevisionRequestDataAttributesMetadataValue();
                        ret.setActualInstance(adapterMetadataStringType.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'MetadataStringType'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for UpdatePartRevisionRequestDataAttributesMetadataValue: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public UpdatePartRevisionRequestDataAttributesMetadataValue() {
        super("anyOf", Boolean.FALSE);
    }

    public UpdatePartRevisionRequestDataAttributesMetadataValue(MetadataDateType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdatePartRevisionRequestDataAttributesMetadataValue(MetadataFloatType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdatePartRevisionRequestDataAttributesMetadataValue(MetadataLongType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdatePartRevisionRequestDataAttributesMetadataValue(MetadataNullType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public UpdatePartRevisionRequestDataAttributesMetadataValue(MetadataStringType o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("MetadataDateType", new GenericType<MetadataDateType>() {
        });
        schemas.put("MetadataFloatType", new GenericType<MetadataFloatType>() {
        });
        schemas.put("MetadataLongType", new GenericType<MetadataLongType>() {
        });
        schemas.put("MetadataNullType", new GenericType<MetadataNullType>() {
        });
        schemas.put("MetadataStringType", new GenericType<MetadataStringType>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return UpdatePartRevisionRequestDataAttributesMetadataValue.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * MetadataDateType, MetadataFloatType, MetadataLongType, MetadataNullType, MetadataStringType
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof MetadataDateType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MetadataFloatType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MetadataLongType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MetadataNullType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MetadataStringType) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be MetadataDateType, MetadataFloatType, MetadataLongType, MetadataNullType, MetadataStringType");
    }

    /**
     * Get the actual instance, which can be the following:
     * MetadataDateType, MetadataFloatType, MetadataLongType, MetadataNullType, MetadataStringType
     *
     * @return The actual instance (MetadataDateType, MetadataFloatType, MetadataLongType, MetadataNullType, MetadataStringType)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetadataDateType`. If the actual instance is not `MetadataDateType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetadataDateType`
     * @throws ClassCastException if the instance is not `MetadataDateType`
     */
    public MetadataDateType getMetadataDateType() throws ClassCastException {
        return (MetadataDateType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetadataFloatType`. If the actual instance is not `MetadataFloatType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetadataFloatType`
     * @throws ClassCastException if the instance is not `MetadataFloatType`
     */
    public MetadataFloatType getMetadataFloatType() throws ClassCastException {
        return (MetadataFloatType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetadataLongType`. If the actual instance is not `MetadataLongType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetadataLongType`
     * @throws ClassCastException if the instance is not `MetadataLongType`
     */
    public MetadataLongType getMetadataLongType() throws ClassCastException {
        return (MetadataLongType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetadataNullType`. If the actual instance is not `MetadataNullType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetadataNullType`
     * @throws ClassCastException if the instance is not `MetadataNullType`
     */
    public MetadataNullType getMetadataNullType() throws ClassCastException {
        return (MetadataNullType)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MetadataStringType`. If the actual instance is not `MetadataStringType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MetadataStringType`
     * @throws ClassCastException if the instance is not `MetadataStringType`
     */
    public MetadataStringType getMetadataStringType() throws ClassCastException {
        return (MetadataStringType)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdatePartRevisionRequestDataAttributesMetadataValue
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with MetadataDateType
    try {
      MetadataDateType.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with MetadataFloatType
    try {
      MetadataFloatType.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with MetadataLongType
    try {
      MetadataLongType.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with MetadataNullType
    try {
      MetadataNullType.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with MetadataStringType
    try {
      MetadataStringType.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for UpdatePartRevisionRequestDataAttributesMetadataValue with anyOf schemas: MetadataDateType, MetadataFloatType, MetadataLongType, MetadataNullType, MetadataStringType. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of UpdatePartRevisionRequestDataAttributesMetadataValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdatePartRevisionRequestDataAttributesMetadataValue
  * @throws IOException if the JSON string is invalid with respect to UpdatePartRevisionRequestDataAttributesMetadataValue
  */
  public static UpdatePartRevisionRequestDataAttributesMetadataValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePartRevisionRequestDataAttributesMetadataValue.class);
  }

 /**
  * Convert an instance of UpdatePartRevisionRequestDataAttributesMetadataValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

