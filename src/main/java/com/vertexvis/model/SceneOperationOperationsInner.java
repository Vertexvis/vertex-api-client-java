/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples,   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.ChangeMaterialOperation;
import com.vertexvis.model.ChangeTransformOperation;
import com.vertexvis.model.ChangeVisibilityOperation;
import com.vertexvis.model.ClearMaterialOperation;
import com.vertexvis.model.ClearTransformOperation;
import com.vertexvis.model.ColorMaterial;
import com.vertexvis.model.DeselectOperation;
import com.vertexvis.model.Matrix4;
import com.vertexvis.model.SelectOperation;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.vertexvis.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SceneOperationOperationsInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SceneOperationOperationsInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SceneOperationOperationsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SceneOperationOperationsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ChangeMaterialOperation> adapterChangeMaterialOperation = gson.getDelegateAdapter(this, TypeToken.get(ChangeMaterialOperation.class));
            final TypeAdapter<ChangeTransformOperation> adapterChangeTransformOperation = gson.getDelegateAdapter(this, TypeToken.get(ChangeTransformOperation.class));
            final TypeAdapter<ChangeVisibilityOperation> adapterChangeVisibilityOperation = gson.getDelegateAdapter(this, TypeToken.get(ChangeVisibilityOperation.class));
            final TypeAdapter<ClearMaterialOperation> adapterClearMaterialOperation = gson.getDelegateAdapter(this, TypeToken.get(ClearMaterialOperation.class));
            final TypeAdapter<ClearTransformOperation> adapterClearTransformOperation = gson.getDelegateAdapter(this, TypeToken.get(ClearTransformOperation.class));
            final TypeAdapter<DeselectOperation> adapterDeselectOperation = gson.getDelegateAdapter(this, TypeToken.get(DeselectOperation.class));
            final TypeAdapter<SelectOperation> adapterSelectOperation = gson.getDelegateAdapter(this, TypeToken.get(SelectOperation.class));

            return (TypeAdapter<T>) new TypeAdapter<SceneOperationOperationsInner>() {
                @Override
                public void write(JsonWriter out, SceneOperationOperationsInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ChangeMaterialOperation`
                    if (value.getActualInstance() instanceof ChangeMaterialOperation) {
                        JsonObject obj = adapterChangeMaterialOperation.toJsonTree((ChangeMaterialOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ChangeTransformOperation`
                    if (value.getActualInstance() instanceof ChangeTransformOperation) {
                        JsonObject obj = adapterChangeTransformOperation.toJsonTree((ChangeTransformOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ChangeVisibilityOperation`
                    if (value.getActualInstance() instanceof ChangeVisibilityOperation) {
                        JsonObject obj = adapterChangeVisibilityOperation.toJsonTree((ChangeVisibilityOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ClearMaterialOperation`
                    if (value.getActualInstance() instanceof ClearMaterialOperation) {
                        JsonObject obj = adapterClearMaterialOperation.toJsonTree((ClearMaterialOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ClearTransformOperation`
                    if (value.getActualInstance() instanceof ClearTransformOperation) {
                        JsonObject obj = adapterClearTransformOperation.toJsonTree((ClearTransformOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DeselectOperation`
                    if (value.getActualInstance() instanceof DeselectOperation) {
                        JsonObject obj = adapterDeselectOperation.toJsonTree((DeselectOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SelectOperation`
                    if (value.getActualInstance() instanceof SelectOperation) {
                        JsonObject obj = adapterSelectOperation.toJsonTree((SelectOperation)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: ChangeMaterialOperation, ChangeTransformOperation, ChangeVisibilityOperation, ClearMaterialOperation, ClearTransformOperation, DeselectOperation, SelectOperation");
                }

                @Override
                public SceneOperationOperationsInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize ChangeMaterialOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChangeMaterialOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'ChangeMaterialOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterChangeMaterialOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ChangeMaterialOperation'", e);
                    }

                    // deserialize ChangeTransformOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChangeTransformOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'ChangeTransformOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterChangeTransformOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ChangeTransformOperation'", e);
                    }

                    // deserialize ChangeVisibilityOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChangeVisibilityOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'ChangeVisibilityOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterChangeVisibilityOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ChangeVisibilityOperation'", e);
                    }

                    // deserialize ClearMaterialOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ClearMaterialOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'ClearMaterialOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterClearMaterialOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ClearMaterialOperation'", e);
                    }

                    // deserialize ClearTransformOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ClearTransformOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'ClearTransformOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterClearTransformOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'ClearTransformOperation'", e);
                    }

                    // deserialize DeselectOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeselectOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'DeselectOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterDeselectOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'DeselectOperation'", e);
                    }

                    // deserialize SelectOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SelectOperation.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'SelectOperation'");
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(adapterSelectOperation.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'SelectOperation'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for SceneOperationOperationsInner: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SceneOperationOperationsInner() {
        super("anyOf", Boolean.FALSE);
    }

    public SceneOperationOperationsInner(ChangeMaterialOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneOperationOperationsInner(ChangeTransformOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneOperationOperationsInner(ChangeVisibilityOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneOperationOperationsInner(ClearMaterialOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneOperationOperationsInner(ClearTransformOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneOperationOperationsInner(DeselectOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneOperationOperationsInner(SelectOperation o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ChangeMaterialOperation", new GenericType<ChangeMaterialOperation>() {
        });
        schemas.put("ChangeTransformOperation", new GenericType<ChangeTransformOperation>() {
        });
        schemas.put("ChangeVisibilityOperation", new GenericType<ChangeVisibilityOperation>() {
        });
        schemas.put("ClearMaterialOperation", new GenericType<ClearMaterialOperation>() {
        });
        schemas.put("ClearTransformOperation", new GenericType<ClearTransformOperation>() {
        });
        schemas.put("DeselectOperation", new GenericType<DeselectOperation>() {
        });
        schemas.put("SelectOperation", new GenericType<SelectOperation>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SceneOperationOperationsInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ChangeMaterialOperation, ChangeTransformOperation, ChangeVisibilityOperation, ClearMaterialOperation, ClearTransformOperation, DeselectOperation, SelectOperation
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ChangeMaterialOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChangeTransformOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChangeVisibilityOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ClearMaterialOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ClearTransformOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeselectOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SelectOperation) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ChangeMaterialOperation, ChangeTransformOperation, ChangeVisibilityOperation, ClearMaterialOperation, ClearTransformOperation, DeselectOperation, SelectOperation");
    }

    /**
     * Get the actual instance, which can be the following:
     * ChangeMaterialOperation, ChangeTransformOperation, ChangeVisibilityOperation, ClearMaterialOperation, ClearTransformOperation, DeselectOperation, SelectOperation
     *
     * @return The actual instance (ChangeMaterialOperation, ChangeTransformOperation, ChangeVisibilityOperation, ClearMaterialOperation, ClearTransformOperation, DeselectOperation, SelectOperation)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChangeMaterialOperation`. If the actual instance is not `ChangeMaterialOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChangeMaterialOperation`
     * @throws ClassCastException if the instance is not `ChangeMaterialOperation`
     */
    public ChangeMaterialOperation getChangeMaterialOperation() throws ClassCastException {
        return (ChangeMaterialOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChangeTransformOperation`. If the actual instance is not `ChangeTransformOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChangeTransformOperation`
     * @throws ClassCastException if the instance is not `ChangeTransformOperation`
     */
    public ChangeTransformOperation getChangeTransformOperation() throws ClassCastException {
        return (ChangeTransformOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChangeVisibilityOperation`. If the actual instance is not `ChangeVisibilityOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChangeVisibilityOperation`
     * @throws ClassCastException if the instance is not `ChangeVisibilityOperation`
     */
    public ChangeVisibilityOperation getChangeVisibilityOperation() throws ClassCastException {
        return (ChangeVisibilityOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ClearMaterialOperation`. If the actual instance is not `ClearMaterialOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ClearMaterialOperation`
     * @throws ClassCastException if the instance is not `ClearMaterialOperation`
     */
    public ClearMaterialOperation getClearMaterialOperation() throws ClassCastException {
        return (ClearMaterialOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ClearTransformOperation`. If the actual instance is not `ClearTransformOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ClearTransformOperation`
     * @throws ClassCastException if the instance is not `ClearTransformOperation`
     */
    public ClearTransformOperation getClearTransformOperation() throws ClassCastException {
        return (ClearTransformOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeselectOperation`. If the actual instance is not `DeselectOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeselectOperation`
     * @throws ClassCastException if the instance is not `DeselectOperation`
     */
    public DeselectOperation getDeselectOperation() throws ClassCastException {
        return (DeselectOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SelectOperation`. If the actual instance is not `SelectOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SelectOperation`
     * @throws ClassCastException if the instance is not `SelectOperation`
     */
    public SelectOperation getSelectOperation() throws ClassCastException {
        return (SelectOperation)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SceneOperationOperationsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with ChangeMaterialOperation
    try {
      ChangeMaterialOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ChangeTransformOperation
    try {
      ChangeTransformOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ChangeVisibilityOperation
    try {
      ChangeVisibilityOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ClearMaterialOperation
    try {
      ClearMaterialOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with ClearTransformOperation
    try {
      ClearTransformOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with DeselectOperation
    try {
      DeselectOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with SelectOperation
    try {
      SelectOperation.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for SceneOperationOperationsInner with anyOf schemas: ChangeMaterialOperation, ChangeTransformOperation, ChangeVisibilityOperation, ClearMaterialOperation, ClearTransformOperation, DeselectOperation, SelectOperation. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SceneOperationOperationsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SceneOperationOperationsInner
  * @throws IOException if the JSON string is invalid with respect to SceneOperationOperationsInner
  */
  public static SceneOperationOperationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SceneOperationOperationsInner.class);
  }

 /**
  * Convert an instance of SceneOperationOperationsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

