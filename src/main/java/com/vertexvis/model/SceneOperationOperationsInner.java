/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples:   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.ChangeMaterialOp;
import com.vertexvis.model.ChangeTransformOp;
import com.vertexvis.model.ChangeVisibilityOp;
import com.vertexvis.model.ClearMaterialOp;
import com.vertexvis.model.ClearRenOp;
import com.vertexvis.model.ClearRepOp;
import com.vertexvis.model.ClearTransformOp;
import com.vertexvis.model.ColorMaterial;
import com.vertexvis.model.DeselectOperation;
import com.vertexvis.model.Matrix4;
import com.vertexvis.model.SelectOp;
import com.vertexvis.model.ViewDefaultRenOp;
import com.vertexvis.model.ViewRenByIdOp;
import com.vertexvis.model.ViewRenBySuppliedIdOp;
import com.vertexvis.model.ViewRepByIdOp;
import com.vertexvis.model.ViewRepByPredefinedIdOp;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.vertexvis.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class SceneOperationOperationsInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SceneOperationOperationsInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SceneOperationOperationsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SceneOperationOperationsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ChangeVisibilityOp> adapterChangeVisibilityOp = gson.getDelegateAdapter(this, TypeToken.get(ChangeVisibilityOp.class));
            final TypeAdapter<ChangeMaterialOp> adapterChangeMaterialOp = gson.getDelegateAdapter(this, TypeToken.get(ChangeMaterialOp.class));
            final TypeAdapter<ClearMaterialOp> adapterClearMaterialOp = gson.getDelegateAdapter(this, TypeToken.get(ClearMaterialOp.class));
            final TypeAdapter<ChangeTransformOp> adapterChangeTransformOp = gson.getDelegateAdapter(this, TypeToken.get(ChangeTransformOp.class));
            final TypeAdapter<ClearTransformOp> adapterClearTransformOp = gson.getDelegateAdapter(this, TypeToken.get(ClearTransformOp.class));
            final TypeAdapter<SelectOp> adapterSelectOp = gson.getDelegateAdapter(this, TypeToken.get(SelectOp.class));
            final TypeAdapter<DeselectOperation> adapterDeselectOperation = gson.getDelegateAdapter(this, TypeToken.get(DeselectOperation.class));
            final TypeAdapter<ClearRenOp> adapterClearRenOp = gson.getDelegateAdapter(this, TypeToken.get(ClearRenOp.class));
            final TypeAdapter<ViewDefaultRenOp> adapterViewDefaultRenOp = gson.getDelegateAdapter(this, TypeToken.get(ViewDefaultRenOp.class));
            final TypeAdapter<ViewRenByIdOp> adapterViewRenByIdOp = gson.getDelegateAdapter(this, TypeToken.get(ViewRenByIdOp.class));
            final TypeAdapter<ViewRenBySuppliedIdOp> adapterViewRenBySuppliedIdOp = gson.getDelegateAdapter(this, TypeToken.get(ViewRenBySuppliedIdOp.class));
            final TypeAdapter<ViewRepByIdOp> adapterViewRepByIdOp = gson.getDelegateAdapter(this, TypeToken.get(ViewRepByIdOp.class));
            final TypeAdapter<ViewRepByPredefinedIdOp> adapterViewRepByPredefinedIdOp = gson.getDelegateAdapter(this, TypeToken.get(ViewRepByPredefinedIdOp.class));
            final TypeAdapter<ClearRepOp> adapterClearRepOp = gson.getDelegateAdapter(this, TypeToken.get(ClearRepOp.class));

            return (TypeAdapter<T>) new TypeAdapter<SceneOperationOperationsInner>() {
                @Override
                public void write(JsonWriter out, SceneOperationOperationsInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ChangeVisibilityOp`
                    if (value.getActualInstance() instanceof ChangeVisibilityOp) {
                        JsonElement element = adapterChangeVisibilityOp.toJsonTree((ChangeVisibilityOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChangeMaterialOp`
                    if (value.getActualInstance() instanceof ChangeMaterialOp) {
                        JsonElement element = adapterChangeMaterialOp.toJsonTree((ChangeMaterialOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ClearMaterialOp`
                    if (value.getActualInstance() instanceof ClearMaterialOp) {
                        JsonElement element = adapterClearMaterialOp.toJsonTree((ClearMaterialOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChangeTransformOp`
                    if (value.getActualInstance() instanceof ChangeTransformOp) {
                        JsonElement element = adapterChangeTransformOp.toJsonTree((ChangeTransformOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ClearTransformOp`
                    if (value.getActualInstance() instanceof ClearTransformOp) {
                        JsonElement element = adapterClearTransformOp.toJsonTree((ClearTransformOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SelectOp`
                    if (value.getActualInstance() instanceof SelectOp) {
                        JsonElement element = adapterSelectOp.toJsonTree((SelectOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeselectOperation`
                    if (value.getActualInstance() instanceof DeselectOperation) {
                        JsonElement element = adapterDeselectOperation.toJsonTree((DeselectOperation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ClearRenOp`
                    if (value.getActualInstance() instanceof ClearRenOp) {
                        JsonElement element = adapterClearRenOp.toJsonTree((ClearRenOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViewDefaultRenOp`
                    if (value.getActualInstance() instanceof ViewDefaultRenOp) {
                        JsonElement element = adapterViewDefaultRenOp.toJsonTree((ViewDefaultRenOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViewRenByIdOp`
                    if (value.getActualInstance() instanceof ViewRenByIdOp) {
                        JsonElement element = adapterViewRenByIdOp.toJsonTree((ViewRenByIdOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViewRenBySuppliedIdOp`
                    if (value.getActualInstance() instanceof ViewRenBySuppliedIdOp) {
                        JsonElement element = adapterViewRenBySuppliedIdOp.toJsonTree((ViewRenBySuppliedIdOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViewRepByIdOp`
                    if (value.getActualInstance() instanceof ViewRepByIdOp) {
                        JsonElement element = adapterViewRepByIdOp.toJsonTree((ViewRepByIdOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ViewRepByPredefinedIdOp`
                    if (value.getActualInstance() instanceof ViewRepByPredefinedIdOp) {
                        JsonElement element = adapterViewRepByPredefinedIdOp.toJsonTree((ViewRepByPredefinedIdOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ClearRepOp`
                    if (value.getActualInstance() instanceof ClearRepOp) {
                        JsonElement element = adapterClearRepOp.toJsonTree((ClearRepOp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: ChangeMaterialOp, ChangeTransformOp, ChangeVisibilityOp, ClearMaterialOp, ClearRenOp, ClearRepOp, ClearTransformOp, DeselectOperation, SelectOp, ViewDefaultRenOp, ViewRenByIdOp, ViewRenBySuppliedIdOp, ViewRepByIdOp, ViewRepByPredefinedIdOp");
                }

                @Override
                public SceneOperationOperationsInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ChangeVisibilityOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChangeVisibilityOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterChangeVisibilityOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChangeVisibilityOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChangeVisibilityOp'", e);
                    }
                    // deserialize ChangeMaterialOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChangeMaterialOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterChangeMaterialOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChangeMaterialOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChangeMaterialOp'", e);
                    }
                    // deserialize ClearMaterialOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ClearMaterialOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterClearMaterialOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ClearMaterialOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ClearMaterialOp'", e);
                    }
                    // deserialize ChangeTransformOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChangeTransformOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterChangeTransformOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChangeTransformOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChangeTransformOp'", e);
                    }
                    // deserialize ClearTransformOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ClearTransformOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterClearTransformOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ClearTransformOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ClearTransformOp'", e);
                    }
                    // deserialize SelectOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SelectOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterSelectOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SelectOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SelectOp'", e);
                    }
                    // deserialize DeselectOperation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeselectOperation.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeselectOperation;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeselectOperation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeselectOperation'", e);
                    }
                    // deserialize ClearRenOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ClearRenOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterClearRenOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ClearRenOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ClearRenOp'", e);
                    }
                    // deserialize ViewDefaultRenOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViewDefaultRenOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterViewDefaultRenOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViewDefaultRenOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViewDefaultRenOp'", e);
                    }
                    // deserialize ViewRenByIdOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViewRenByIdOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterViewRenByIdOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViewRenByIdOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViewRenByIdOp'", e);
                    }
                    // deserialize ViewRenBySuppliedIdOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViewRenBySuppliedIdOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterViewRenBySuppliedIdOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViewRenBySuppliedIdOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViewRenBySuppliedIdOp'", e);
                    }
                    // deserialize ViewRepByIdOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViewRepByIdOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterViewRepByIdOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViewRepByIdOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViewRepByIdOp'", e);
                    }
                    // deserialize ViewRepByPredefinedIdOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ViewRepByPredefinedIdOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterViewRepByPredefinedIdOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ViewRepByPredefinedIdOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ViewRepByPredefinedIdOp'", e);
                    }
                    // deserialize ClearRepOp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ClearRepOp.validateJsonElement(jsonElement);
                        actualAdapter = adapterClearRepOp;
                        SceneOperationOperationsInner ret = new SceneOperationOperationsInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ClearRepOp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ClearRepOp'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for SceneOperationOperationsInner: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SceneOperationOperationsInner() {
        super("anyOf", Boolean.FALSE);
    }

    public SceneOperationOperationsInner(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ChangeVisibilityOp", ChangeVisibilityOp.class);
        schemas.put("ChangeMaterialOp", ChangeMaterialOp.class);
        schemas.put("ClearMaterialOp", ClearMaterialOp.class);
        schemas.put("ChangeTransformOp", ChangeTransformOp.class);
        schemas.put("ClearTransformOp", ClearTransformOp.class);
        schemas.put("SelectOp", SelectOp.class);
        schemas.put("DeselectOperation", DeselectOperation.class);
        schemas.put("ClearRenOp", ClearRenOp.class);
        schemas.put("ViewDefaultRenOp", ViewDefaultRenOp.class);
        schemas.put("ViewRenByIdOp", ViewRenByIdOp.class);
        schemas.put("ViewRenBySuppliedIdOp", ViewRenBySuppliedIdOp.class);
        schemas.put("ViewRepByIdOp", ViewRepByIdOp.class);
        schemas.put("ViewRepByPredefinedIdOp", ViewRepByPredefinedIdOp.class);
        schemas.put("ClearRepOp", ClearRepOp.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SceneOperationOperationsInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ChangeMaterialOp, ChangeTransformOp, ChangeVisibilityOp, ClearMaterialOp, ClearRenOp, ClearRepOp, ClearTransformOp, DeselectOperation, SelectOp, ViewDefaultRenOp, ViewRenByIdOp, ViewRenBySuppliedIdOp, ViewRepByIdOp, ViewRepByPredefinedIdOp
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ChangeVisibilityOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChangeMaterialOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ClearMaterialOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChangeTransformOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ClearTransformOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SelectOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeselectOperation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ClearRenOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViewDefaultRenOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViewRenByIdOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViewRenBySuppliedIdOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViewRepByIdOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ViewRepByPredefinedIdOp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ClearRepOp) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ChangeMaterialOp, ChangeTransformOp, ChangeVisibilityOp, ClearMaterialOp, ClearRenOp, ClearRepOp, ClearTransformOp, DeselectOperation, SelectOp, ViewDefaultRenOp, ViewRenByIdOp, ViewRenBySuppliedIdOp, ViewRepByIdOp, ViewRepByPredefinedIdOp");
    }

    /**
     * Get the actual instance, which can be the following:
     * ChangeMaterialOp, ChangeTransformOp, ChangeVisibilityOp, ClearMaterialOp, ClearRenOp, ClearRepOp, ClearTransformOp, DeselectOperation, SelectOp, ViewDefaultRenOp, ViewRenByIdOp, ViewRenBySuppliedIdOp, ViewRepByIdOp, ViewRepByPredefinedIdOp
     *
     * @return The actual instance (ChangeMaterialOp, ChangeTransformOp, ChangeVisibilityOp, ClearMaterialOp, ClearRenOp, ClearRepOp, ClearTransformOp, DeselectOperation, SelectOp, ViewDefaultRenOp, ViewRenByIdOp, ViewRenBySuppliedIdOp, ViewRepByIdOp, ViewRepByPredefinedIdOp)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChangeVisibilityOp`. If the actual instance is not `ChangeVisibilityOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChangeVisibilityOp`
     * @throws ClassCastException if the instance is not `ChangeVisibilityOp`
     */
    public ChangeVisibilityOp getChangeVisibilityOp() throws ClassCastException {
        return (ChangeVisibilityOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChangeMaterialOp`. If the actual instance is not `ChangeMaterialOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChangeMaterialOp`
     * @throws ClassCastException if the instance is not `ChangeMaterialOp`
     */
    public ChangeMaterialOp getChangeMaterialOp() throws ClassCastException {
        return (ChangeMaterialOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ClearMaterialOp`. If the actual instance is not `ClearMaterialOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ClearMaterialOp`
     * @throws ClassCastException if the instance is not `ClearMaterialOp`
     */
    public ClearMaterialOp getClearMaterialOp() throws ClassCastException {
        return (ClearMaterialOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ChangeTransformOp`. If the actual instance is not `ChangeTransformOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChangeTransformOp`
     * @throws ClassCastException if the instance is not `ChangeTransformOp`
     */
    public ChangeTransformOp getChangeTransformOp() throws ClassCastException {
        return (ChangeTransformOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ClearTransformOp`. If the actual instance is not `ClearTransformOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ClearTransformOp`
     * @throws ClassCastException if the instance is not `ClearTransformOp`
     */
    public ClearTransformOp getClearTransformOp() throws ClassCastException {
        return (ClearTransformOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SelectOp`. If the actual instance is not `SelectOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SelectOp`
     * @throws ClassCastException if the instance is not `SelectOp`
     */
    public SelectOp getSelectOp() throws ClassCastException {
        return (SelectOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeselectOperation`. If the actual instance is not `DeselectOperation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeselectOperation`
     * @throws ClassCastException if the instance is not `DeselectOperation`
     */
    public DeselectOperation getDeselectOperation() throws ClassCastException {
        return (DeselectOperation)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ClearRenOp`. If the actual instance is not `ClearRenOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ClearRenOp`
     * @throws ClassCastException if the instance is not `ClearRenOp`
     */
    public ClearRenOp getClearRenOp() throws ClassCastException {
        return (ClearRenOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ViewDefaultRenOp`. If the actual instance is not `ViewDefaultRenOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViewDefaultRenOp`
     * @throws ClassCastException if the instance is not `ViewDefaultRenOp`
     */
    public ViewDefaultRenOp getViewDefaultRenOp() throws ClassCastException {
        return (ViewDefaultRenOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ViewRenByIdOp`. If the actual instance is not `ViewRenByIdOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViewRenByIdOp`
     * @throws ClassCastException if the instance is not `ViewRenByIdOp`
     */
    public ViewRenByIdOp getViewRenByIdOp() throws ClassCastException {
        return (ViewRenByIdOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ViewRenBySuppliedIdOp`. If the actual instance is not `ViewRenBySuppliedIdOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViewRenBySuppliedIdOp`
     * @throws ClassCastException if the instance is not `ViewRenBySuppliedIdOp`
     */
    public ViewRenBySuppliedIdOp getViewRenBySuppliedIdOp() throws ClassCastException {
        return (ViewRenBySuppliedIdOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ViewRepByIdOp`. If the actual instance is not `ViewRepByIdOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViewRepByIdOp`
     * @throws ClassCastException if the instance is not `ViewRepByIdOp`
     */
    public ViewRepByIdOp getViewRepByIdOp() throws ClassCastException {
        return (ViewRepByIdOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ViewRepByPredefinedIdOp`. If the actual instance is not `ViewRepByPredefinedIdOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ViewRepByPredefinedIdOp`
     * @throws ClassCastException if the instance is not `ViewRepByPredefinedIdOp`
     */
    public ViewRepByPredefinedIdOp getViewRepByPredefinedIdOp() throws ClassCastException {
        return (ViewRepByPredefinedIdOp)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ClearRepOp`. If the actual instance is not `ClearRepOp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ClearRepOp`
     * @throws ClassCastException if the instance is not `ClearRepOp`
     */
    public ClearRepOp getClearRepOp() throws ClassCastException {
        return (ClearRepOp)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SceneOperationOperationsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ChangeVisibilityOp
        try {
            ChangeVisibilityOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChangeVisibilityOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChangeMaterialOp
        try {
            ChangeMaterialOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChangeMaterialOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ClearMaterialOp
        try {
            ClearMaterialOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ClearMaterialOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChangeTransformOp
        try {
            ChangeTransformOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChangeTransformOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ClearTransformOp
        try {
            ClearTransformOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ClearTransformOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SelectOp
        try {
            SelectOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SelectOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeselectOperation
        try {
            DeselectOperation.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeselectOperation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ClearRenOp
        try {
            ClearRenOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ClearRenOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViewDefaultRenOp
        try {
            ViewDefaultRenOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViewDefaultRenOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViewRenByIdOp
        try {
            ViewRenByIdOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViewRenByIdOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViewRenBySuppliedIdOp
        try {
            ViewRenBySuppliedIdOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViewRenBySuppliedIdOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViewRepByIdOp
        try {
            ViewRepByIdOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViewRepByIdOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ViewRepByPredefinedIdOp
        try {
            ViewRepByPredefinedIdOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ViewRepByPredefinedIdOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ClearRepOp
        try {
            ClearRepOp.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ClearRepOp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for SceneOperationOperationsInner with anyOf schemas: ChangeMaterialOp, ChangeTransformOp, ChangeVisibilityOp, ClearMaterialOp, ClearRenOp, ClearRepOp, ClearTransformOp, DeselectOperation, SelectOp, ViewDefaultRenOp, ViewRenByIdOp, ViewRenBySuppliedIdOp, ViewRepByIdOp, ViewRepByPredefinedIdOp. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of SceneOperationOperationsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SceneOperationOperationsInner
     * @throws IOException if the JSON string is invalid with respect to SceneOperationOperationsInner
     */
    public static SceneOperationOperationsInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SceneOperationOperationsInner.class);
    }

    /**
     * Convert an instance of SceneOperationOperationsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

