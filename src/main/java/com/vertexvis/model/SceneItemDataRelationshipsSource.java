/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples,   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.GeometrySetRelationship;
import com.vertexvis.model.PartRevisionRelationship;
import com.vertexvis.model.SceneRelationship;
import com.vertexvis.model.SceneRelationshipData;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.vertexvis.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SceneItemDataRelationshipsSource extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SceneItemDataRelationshipsSource.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SceneItemDataRelationshipsSource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SceneItemDataRelationshipsSource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GeometrySetRelationship> adapterGeometrySetRelationship = gson.getDelegateAdapter(this, TypeToken.get(GeometrySetRelationship.class));
            final TypeAdapter<PartRevisionRelationship> adapterPartRevisionRelationship = gson.getDelegateAdapter(this, TypeToken.get(PartRevisionRelationship.class));
            final TypeAdapter<SceneRelationship> adapterSceneRelationship = gson.getDelegateAdapter(this, TypeToken.get(SceneRelationship.class));

            return (TypeAdapter<T>) new TypeAdapter<SceneItemDataRelationshipsSource>() {
                @Override
                public void write(JsonWriter out, SceneItemDataRelationshipsSource value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GeometrySetRelationship`
                    if (value.getActualInstance() instanceof GeometrySetRelationship) {
                        JsonObject obj = adapterGeometrySetRelationship.toJsonTree((GeometrySetRelationship)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PartRevisionRelationship`
                    if (value.getActualInstance() instanceof PartRevisionRelationship) {
                        JsonObject obj = adapterPartRevisionRelationship.toJsonTree((PartRevisionRelationship)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SceneRelationship`
                    if (value.getActualInstance() instanceof SceneRelationship) {
                        JsonObject obj = adapterSceneRelationship.toJsonTree((SceneRelationship)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: GeometrySetRelationship, PartRevisionRelationship, SceneRelationship");
                }

                @Override
                public SceneItemDataRelationshipsSource read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize GeometrySetRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometrySetRelationship.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'GeometrySetRelationship'");
                        SceneItemDataRelationshipsSource ret = new SceneItemDataRelationshipsSource();
                        ret.setActualInstance(adapterGeometrySetRelationship.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'GeometrySetRelationship'", e);
                    }

                    // deserialize PartRevisionRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PartRevisionRelationship.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'PartRevisionRelationship'");
                        SceneItemDataRelationshipsSource ret = new SceneItemDataRelationshipsSource();
                        ret.setActualInstance(adapterPartRevisionRelationship.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'PartRevisionRelationship'", e);
                    }

                    // deserialize SceneRelationship
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SceneRelationship.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'SceneRelationship'");
                        SceneItemDataRelationshipsSource ret = new SceneItemDataRelationshipsSource();
                        ret.setActualInstance(adapterSceneRelationship.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'SceneRelationship'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for SceneItemDataRelationshipsSource: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SceneItemDataRelationshipsSource() {
        super("anyOf", Boolean.FALSE);
    }

    public SceneItemDataRelationshipsSource(GeometrySetRelationship o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneItemDataRelationshipsSource(PartRevisionRelationship o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SceneItemDataRelationshipsSource(SceneRelationship o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GeometrySetRelationship", new GenericType<GeometrySetRelationship>() {
        });
        schemas.put("PartRevisionRelationship", new GenericType<PartRevisionRelationship>() {
        });
        schemas.put("SceneRelationship", new GenericType<SceneRelationship>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SceneItemDataRelationshipsSource.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * GeometrySetRelationship, PartRevisionRelationship, SceneRelationship
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GeometrySetRelationship) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PartRevisionRelationship) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SceneRelationship) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GeometrySetRelationship, PartRevisionRelationship, SceneRelationship");
    }

    /**
     * Get the actual instance, which can be the following:
     * GeometrySetRelationship, PartRevisionRelationship, SceneRelationship
     *
     * @return The actual instance (GeometrySetRelationship, PartRevisionRelationship, SceneRelationship)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometrySetRelationship`. If the actual instance is not `GeometrySetRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometrySetRelationship`
     * @throws ClassCastException if the instance is not `GeometrySetRelationship`
     */
    public GeometrySetRelationship getGeometrySetRelationship() throws ClassCastException {
        return (GeometrySetRelationship)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PartRevisionRelationship`. If the actual instance is not `PartRevisionRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PartRevisionRelationship`
     * @throws ClassCastException if the instance is not `PartRevisionRelationship`
     */
    public PartRevisionRelationship getPartRevisionRelationship() throws ClassCastException {
        return (PartRevisionRelationship)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SceneRelationship`. If the actual instance is not `SceneRelationship`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SceneRelationship`
     * @throws ClassCastException if the instance is not `SceneRelationship`
     */
    public SceneRelationship getSceneRelationship() throws ClassCastException {
        return (SceneRelationship)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SceneItemDataRelationshipsSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with GeometrySetRelationship
    try {
      GeometrySetRelationship.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with PartRevisionRelationship
    try {
      PartRevisionRelationship.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with SceneRelationship
    try {
      SceneRelationship.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for SceneItemDataRelationshipsSource with anyOf schemas: GeometrySetRelationship, PartRevisionRelationship, SceneRelationship. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SceneItemDataRelationshipsSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SceneItemDataRelationshipsSource
  * @throws IOException if the JSON string is invalid with respect to SceneItemDataRelationshipsSource
  */
  public static SceneItemDataRelationshipsSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SceneItemDataRelationshipsSource.class);
  }

 /**
  * Convert an instance of SceneItemDataRelationshipsSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

