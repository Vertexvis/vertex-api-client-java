/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples,   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.CreateSceneViewRequestDataAttributesCamera;
import com.vertexvis.model.FeatureLines;
import com.vertexvis.model.ThumbnailData;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vertexvis.JSON;

/**
 * SceneViewStateDataAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SceneViewStateDataAttributes {
  public static final String SERIALIZED_NAME_CAMERA = "camera";
  @SerializedName(SERIALIZED_NAME_CAMERA)
  private CreateSceneViewRequestDataAttributesCamera camera;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<ThumbnailData> thumbnails = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURE_LINES = "featureLines";
  @SerializedName(SERIALIZED_NAME_FEATURE_LINES)
  private FeatureLines featureLines;

  public static final String SERIALIZED_NAME_NO_DEFAULT_LIGHTS = "noDefaultLights";
  @SerializedName(SERIALIZED_NAME_NO_DEFAULT_LIGHTS)
  private Boolean noDefaultLights;

  public static final String SERIALIZED_NAME_SUPPLIED_ID = "suppliedId";
  @SerializedName(SERIALIZED_NAME_SUPPLIED_ID)
  private String suppliedId;

  public SceneViewStateDataAttributes() {
  }

  public SceneViewStateDataAttributes camera(CreateSceneViewRequestDataAttributesCamera camera) {
    
    this.camera = camera;
    return this;
  }

   /**
   * Get camera
   * @return camera
  **/
  @javax.annotation.Nullable

  public CreateSceneViewRequestDataAttributesCamera getCamera() {
    return camera;
  }


  public void setCamera(CreateSceneViewRequestDataAttributesCamera camera) {
    this.camera = camera;
  }


  public SceneViewStateDataAttributes created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public SceneViewStateDataAttributes name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SceneViewStateDataAttributes thumbnails(List<ThumbnailData> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public SceneViewStateDataAttributes addThumbnailsItem(ThumbnailData thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nullable

  public List<ThumbnailData> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<ThumbnailData> thumbnails) {
    this.thumbnails = thumbnails;
  }


  public SceneViewStateDataAttributes featureLines(FeatureLines featureLines) {
    
    this.featureLines = featureLines;
    return this;
  }

   /**
   * Get featureLines
   * @return featureLines
  **/
  @javax.annotation.Nullable

  public FeatureLines getFeatureLines() {
    return featureLines;
  }


  public void setFeatureLines(FeatureLines featureLines) {
    this.featureLines = featureLines;
  }


  public SceneViewStateDataAttributes noDefaultLights(Boolean noDefaultLights) {
    
    this.noDefaultLights = noDefaultLights;
    return this;
  }

   /**
   * Get noDefaultLights
   * @return noDefaultLights
  **/
  @javax.annotation.Nullable

  public Boolean getNoDefaultLights() {
    return noDefaultLights;
  }


  public void setNoDefaultLights(Boolean noDefaultLights) {
    this.noDefaultLights = noDefaultLights;
  }


  public SceneViewStateDataAttributes suppliedId(String suppliedId) {
    
    this.suppliedId = suppliedId;
    return this;
  }

   /**
   * Get suppliedId
   * @return suppliedId
  **/
  @javax.annotation.Nullable

  public String getSuppliedId() {
    return suppliedId;
  }


  public void setSuppliedId(String suppliedId) {
    this.suppliedId = suppliedId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SceneViewStateDataAttributes sceneViewStateDataAttributes = (SceneViewStateDataAttributes) o;
    return Objects.equals(this.camera, sceneViewStateDataAttributes.camera) &&
        Objects.equals(this.created, sceneViewStateDataAttributes.created) &&
        Objects.equals(this.name, sceneViewStateDataAttributes.name) &&
        Objects.equals(this.thumbnails, sceneViewStateDataAttributes.thumbnails) &&
        Objects.equals(this.featureLines, sceneViewStateDataAttributes.featureLines) &&
        Objects.equals(this.noDefaultLights, sceneViewStateDataAttributes.noDefaultLights) &&
        Objects.equals(this.suppliedId, sceneViewStateDataAttributes.suppliedId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(camera, created, name, thumbnails, featureLines, noDefaultLights, suppliedId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SceneViewStateDataAttributes {\n");
    sb.append("    camera: ").append(toIndentedString(camera)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    featureLines: ").append(toIndentedString(featureLines)).append("\n");
    sb.append("    noDefaultLights: ").append(toIndentedString(noDefaultLights)).append("\n");
    sb.append("    suppliedId: ").append(toIndentedString(suppliedId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("camera");
    openapiFields.add("created");
    openapiFields.add("name");
    openapiFields.add("thumbnails");
    openapiFields.add("featureLines");
    openapiFields.add("noDefaultLights");
    openapiFields.add("suppliedId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SceneViewStateDataAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SceneViewStateDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SceneViewStateDataAttributes is not found in the empty JSON string", SceneViewStateDataAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SceneViewStateDataAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SceneViewStateDataAttributes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `camera`
      if (jsonObj.get("camera") != null && !jsonObj.get("camera").isJsonNull()) {
        CreateSceneViewRequestDataAttributesCamera.validateJsonObject(jsonObj.getAsJsonObject("camera"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
        if (jsonArraythumbnails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thumbnails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
          }

          // validate the optional field `thumbnails` (array)
          for (int i = 0; i < jsonArraythumbnails.size(); i++) {
            ThumbnailData.validateJsonObject(jsonArraythumbnails.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `featureLines`
      if (jsonObj.get("featureLines") != null && !jsonObj.get("featureLines").isJsonNull()) {
        FeatureLines.validateJsonObject(jsonObj.getAsJsonObject("featureLines"));
      }
      if ((jsonObj.get("suppliedId") != null && !jsonObj.get("suppliedId").isJsonNull()) && !jsonObj.get("suppliedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suppliedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suppliedId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SceneViewStateDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SceneViewStateDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SceneViewStateDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SceneViewStateDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<SceneViewStateDataAttributes>() {
           @Override
           public void write(JsonWriter out, SceneViewStateDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SceneViewStateDataAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SceneViewStateDataAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SceneViewStateDataAttributes
  * @throws IOException if the JSON string is invalid with respect to SceneViewStateDataAttributes
  */
  public static SceneViewStateDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SceneViewStateDataAttributes.class);
  }

 /**
  * Convert an instance of SceneViewStateDataAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

