/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples:   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vertexvis.model.CreateSceneExpressionAlterationRequestData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Support a query expression for a scene alteration.  To perform a standard item alteration: &#x60;&#x60;&#x60;json {   \&quot;data\&quot; : {     \&quot;type\&quot; : \&quot;scene-alteration-expression\&quot;,     \&quot;attributes\&quot; : {       \&quot;operations\&quot; : [         {           \&quot;expression\&quot; : {             \&quot;type\&quot; : \&quot;query-operand\&quot;,             \&quot;query\&quot; : {               \&quot;type\&quot; : \&quot;query-by-id\&quot;,               \&quot;value\&quot; : \&quot;{SCENE_ITEM_ID}\&quot;             }           },           \&quot;changes\&quot; : [             {               \&quot;type\&quot; : \&quot;change-visibility\&quot;,               \&quot;visible\&quot; : false             }           ]         }       ]     }   } } &#x60;&#x60;&#x60; To perform a join of two metadata queries, i.e, an \&quot;and\&quot; query: &#x60;&#x60;&#x60;json {   \&quot;data\&quot; : {     \&quot;type\&quot; : \&quot;scene-alteration-expression\&quot;,     \&quot;attributes\&quot; : {       \&quot;operations\&quot; : [         {           \&quot;expression\&quot; : {             \&quot;type\&quot; : \&quot;and\&quot;,             \&quot;left\&quot; : {               \&quot;type\&quot; : \&quot;query-operand\&quot;,               \&quot;query\&quot; : {                 \&quot;type\&quot; : \&quot;query-by-metadata\&quot;,                 \&quot;filter\&quot; : \&quot;vdXUKl2pQr\&quot;,                 \&quot;keys\&quot; : [                   \&quot;jxIuahIdXS\&quot;,                   \&quot;9tegKF6acH\&quot;                 ]               }             },             \&quot;right\&quot; : {               \&quot;type\&quot; : \&quot;query-operand\&quot;,               \&quot;query\&quot; : {                 \&quot;type\&quot; : \&quot;query-by-metadata\&quot;,                 \&quot;filter\&quot; : \&quot;IE8P9JRPXC\&quot;,                 \&quot;keys\&quot; : [                   \&quot;5ggPOzw4bT\&quot;,                   \&quot;7xQrQE5Q67\&quot;                 ]               }             }           },           \&quot;changes\&quot; : [             {               \&quot;type\&quot; : \&quot;change-visibility\&quot;,               \&quot;visible\&quot; : false             }           ]         }       ]     }   } } &#x60;&#x60;&#x60; To provide more complex queries, the left/right also accept or/and expressions. Here&#39;s an example of a nested &#x60;or&#x60; item based query: &#x60;&#x60;&#x60;json {   \&quot;data\&quot; : {     \&quot;type\&quot; : \&quot;scene-alteration-expression\&quot;,     \&quot;attributes\&quot; : {       \&quot;operations\&quot; : [         {           \&quot;expression\&quot; : {             \&quot;type\&quot; : \&quot;or\&quot;,             \&quot;left\&quot; : {               \&quot;type\&quot; : \&quot;or\&quot;,               \&quot;left\&quot; : {                 \&quot;type\&quot; : \&quot;query-operand\&quot;,                 \&quot;query\&quot; : {                   \&quot;type\&quot; : \&quot;query-by-id\&quot;,                   \&quot;value\&quot; : \&quot;{SCENE_ITEM_ID_1}\&quot;                 }               },               \&quot;right\&quot; : {                 \&quot;type\&quot; : \&quot;query-operand\&quot;,                 \&quot;query\&quot; : {                   \&quot;type\&quot; : \&quot;query-by-id\&quot;,                   \&quot;value\&quot; : \&quot;{SCENE_ITEM_ID_2}\&quot;                 }               }             },             \&quot;right\&quot; : {               \&quot;type\&quot; : \&quot;query-operand\&quot;,               \&quot;query\&quot; : {                 \&quot;type\&quot; : \&quot;query-by-id\&quot;,                 \&quot;value\&quot; : \&quot;{SCENE_ITEM_ID_3}\&quot;               }             }           },           \&quot;changes\&quot; : [             {               \&quot;type\&quot; : \&quot;change-visibility\&quot;,               \&quot;visible\&quot; : false             }           ]         }       ]     }   } } &#x60;&#x60;&#x60; 
 */
@ApiModel(description = "Support a query expression for a scene alteration.  To perform a standard item alteration: ```json {   \"data\" : {     \"type\" : \"scene-alteration-expression\",     \"attributes\" : {       \"operations\" : [         {           \"expression\" : {             \"type\" : \"query-operand\",             \"query\" : {               \"type\" : \"query-by-id\",               \"value\" : \"{SCENE_ITEM_ID}\"             }           },           \"changes\" : [             {               \"type\" : \"change-visibility\",               \"visible\" : false             }           ]         }       ]     }   } } ``` To perform a join of two metadata queries, i.e, an \"and\" query: ```json {   \"data\" : {     \"type\" : \"scene-alteration-expression\",     \"attributes\" : {       \"operations\" : [         {           \"expression\" : {             \"type\" : \"and\",             \"left\" : {               \"type\" : \"query-operand\",               \"query\" : {                 \"type\" : \"query-by-metadata\",                 \"filter\" : \"vdXUKl2pQr\",                 \"keys\" : [                   \"jxIuahIdXS\",                   \"9tegKF6acH\"                 ]               }             },             \"right\" : {               \"type\" : \"query-operand\",               \"query\" : {                 \"type\" : \"query-by-metadata\",                 \"filter\" : \"IE8P9JRPXC\",                 \"keys\" : [                   \"5ggPOzw4bT\",                   \"7xQrQE5Q67\"                 ]               }             }           },           \"changes\" : [             {               \"type\" : \"change-visibility\",               \"visible\" : false             }           ]         }       ]     }   } } ``` To provide more complex queries, the left/right also accept or/and expressions. Here's an example of a nested `or` item based query: ```json {   \"data\" : {     \"type\" : \"scene-alteration-expression\",     \"attributes\" : {       \"operations\" : [         {           \"expression\" : {             \"type\" : \"or\",             \"left\" : {               \"type\" : \"or\",               \"left\" : {                 \"type\" : \"query-operand\",                 \"query\" : {                   \"type\" : \"query-by-id\",                   \"value\" : \"{SCENE_ITEM_ID_1}\"                 }               },               \"right\" : {                 \"type\" : \"query-operand\",                 \"query\" : {                   \"type\" : \"query-by-id\",                   \"value\" : \"{SCENE_ITEM_ID_2}\"                 }               }             },             \"right\" : {               \"type\" : \"query-operand\",               \"query\" : {                 \"type\" : \"query-by-id\",                 \"value\" : \"{SCENE_ITEM_ID_3}\"               }             }           },           \"changes\" : [             {               \"type\" : \"change-visibility\",               \"visible\" : false             }           ]         }       ]     }   } } ``` ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateSceneExpressionAlterationRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private CreateSceneExpressionAlterationRequestData data;

  public CreateSceneExpressionAlterationRequest() { 
  }

  public CreateSceneExpressionAlterationRequest data(CreateSceneExpressionAlterationRequestData data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CreateSceneExpressionAlterationRequestData getData() {
    return data;
  }


  public void setData(CreateSceneExpressionAlterationRequestData data) {
    this.data = data;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSceneExpressionAlterationRequest createSceneExpressionAlterationRequest = (CreateSceneExpressionAlterationRequest) o;
    return Objects.equals(this.data, createSceneExpressionAlterationRequest.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSceneExpressionAlterationRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

