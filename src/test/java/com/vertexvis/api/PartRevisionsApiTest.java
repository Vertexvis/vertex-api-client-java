/*
 * Vertex Platform API
 * The Vertex distributed cloud rendering platform includes a set of APIs and SDKs, which together allow easily integrating 3D product data into your business application.  See our [Developer Guides](https://developer.vertexvis.com/docs/guides/render-your-first-scene) to get started.  Notes about the Postman collection and API Reference code samples,   - They include all required and optional body parameters for completeness. Remove any optional parameters as desired.   - They use auto-generated IDs and other values that may share the same value for ease of documentation only. In actual requests and responses, the IDs should uniquely identify their corresponding resource. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@vertexvis.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vertexvis.api;

import com.vertexvis.ApiException;
import com.vertexvis.model.Failure;
import java.io.File;
import com.vertexvis.model.PartRevision;
import com.vertexvis.model.PartRevisionList;
import com.vertexvis.model.QueuedJob;
import java.util.UUID;
import com.vertexvis.model.UpdatePartRevisionRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartRevisionsApi
 */
@Ignore
public class PartRevisionsApiTest {

    private final PartRevisionsApi api = new PartRevisionsApi();

    
    /**
     * 
     *
     * Delete a &#x60;part-revision&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePartRevisionTest() throws ApiException {
        UUID id = null;
        QueuedJob response = api.deletePartRevision(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a &#x60;part-revision&#x60; by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartRevisionTest() throws ApiException {
        UUID id = null;
        String fieldsPartRevision = null;
        PartRevision response = api.getPartRevision(id, fieldsPartRevision);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get &#x60;part-revisions&#x60; for a &#x60;part&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPartRevisionsTest() throws ApiException {
        UUID id = null;
        String pageCursor = null;
        Integer pageSize = null;
        String filterSuppliedId = null;
        PartRevisionList response = api.getPartRevisions(id, pageCursor, pageSize, filterSuppliedId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a &#x60;queued-part-revision-deletion&#x60; by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueuedPartRevisionDeletionTest() throws ApiException {
        UUID id = null;
        QueuedJob response = api.getQueuedPartRevisionDeletion(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a rendered image of a &#x60;part-revision&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renderPartRevisionTest() throws ApiException {
        UUID id = null;
        Integer height = null;
        Integer width = null;
        File response = api.renderPartRevision(id, height, width);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a &#x60;part-revision&#x60;. Note that metadata updates are eventually consistent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePartRevisionTest() throws ApiException {
        UUID id = null;
        UpdatePartRevisionRequest updatePartRevisionRequest = null;
        PartRevision response = api.updatePartRevision(id, updatePartRevisionRequest);

        // TODO: test validations
    }
    
}
