plugins {
    id "idea"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
}

// Define version once at the root level
def projectVersion = '0.11.0'
def isSnapshot = project.hasProperty('isSnapshot') && project.isSnapshot.toBoolean()
version = isSnapshot ? "${projectVersion}-SNAPSHOT" : projectVersion

// Set group at the root level
group = 'com.vertexvis'

allprojects {
    group = 'com.vertexvis'
    version = rootProject.version
    
    // Make project version accessible as a project property for buildscript blocks
    ext.projectVersion = projectVersion
    
    repositories {
        mavenCentral()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Vertexvis/vertex-api-client-java")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user") ?: ""
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key") ?: ""
            }
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }
    
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

// Simplified approach to handle project dependencies
gradle.projectsEvaluated {
    // This block runs after all projects have been evaluated
    project(':api-client-library').tasks.named('openApiGenerate') {
        // First, make sure the plugin is built
        dependsOn project(':openapi-generator-plugin').tasks.named('build')
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = project.hasProperty("ossrhUsername") ? project.ossrhUsername : ""
            password = project.hasProperty("ossrhPassword") ? project.ossrhPassword : ""
        }
    }
}

def base64Decode(prop) {
    return new String(Base64.getDecoder().decode(project.findProperty(prop).toString())).trim()
}
